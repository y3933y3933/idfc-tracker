// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: history.sql

package database

import (
	"context"
	"time"
)

const clearUserHistory = `-- name: ClearUserHistory :exec
DELETE FROM history WHERE user_id = ?
`

func (q *Queries) ClearUserHistory(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, clearUserHistory, userID)
	return err
}

const getHistoryByUserID = `-- name: GetHistoryByUserID :many
SELECT id, user_id, point, reason, created_at
FROM history
WHERE user_id = ?
ORDER BY created_at DESC
`

func (q *Queries) GetHistoryByUserID(ctx context.Context, userID int64) ([]History, error) {
	rows, err := q.db.QueryContext(ctx, getHistoryByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []History
	for rows.Next() {
		var i History
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Point,
			&i.Reason,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHistoryByUserIDAndDateRange = `-- name: GetHistoryByUserIDAndDateRange :many
SELECT id, user_id, point, reason, created_at
FROM history
WHERE user_id = ?
AND (created_at BETWEEN ? AND ?)
ORDER BY created_at DESC
`

type GetHistoryByUserIDAndDateRangeParams struct {
	UserID        int64
	FromCreatedAt time.Time
	ToCreatedAt   time.Time
}

func (q *Queries) GetHistoryByUserIDAndDateRange(ctx context.Context, arg GetHistoryByUserIDAndDateRangeParams) ([]History, error) {
	rows, err := q.db.QueryContext(ctx, getHistoryByUserIDAndDateRange, arg.UserID, arg.FromCreatedAt, arg.ToCreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []History
	for rows.Next() {
		var i History
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Point,
			&i.Reason,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertHistory = `-- name: InsertHistory :exec
INSERT INTO history (user_id, point, reason)
VALUES (?, ?, ?)
`

type InsertHistoryParams struct {
	UserID int64
	Point  int64
	Reason string
}

func (q *Queries) InsertHistory(ctx context.Context, arg InsertHistoryParams) error {
	_, err := q.db.ExecContext(ctx, insertHistory, arg.UserID, arg.Point, arg.Reason)
	return err
}
